{"version":3,"file":"hgjamo.umd.js","sources":["../src/constants.ts","../src/utils.ts","../src/decomposeToCompatJamo.ts","../src/composeFromCompat.ts"],"sourcesContent":["import { TStringIndex } from \"./@types\";\n\nconst CONSONANTS_TABLE: TStringIndex = {\n    // Inital consonants to compatibility consonants\n    '\\u1100': '\\u3131',\n    '\\u1101': '\\u3132',\n    '\\u1102': '\\u3134',\n    '\\u1103': '\\u3137', \n    '\\u1104': '\\u3138',\n    '\\u1105': '\\u3139',\n    '\\u1106': '\\u3141',\n    '\\u1107': '\\u3142',\n    '\\u1108': '\\u3143',\n    '\\u1109': '\\u3145',\n    '\\u110a': '\\u3146',\n    '\\u110b': '\\u3147',\n    '\\u110c': '\\u3148',\n    '\\u110d': '\\u3149',\n    '\\u110e': '\\u314a',\n    '\\u110f': '\\u314b',\n    '\\u1110': '\\u314c',\n    '\\u1111': '\\u314d',\n    '\\u1112': '\\u314e',\n    // Final consonants to compatibility consonants\n    '\\u11a8': '\\u3131',\n    '\\u11a9': '\\u3132',\n    '\\u11aa': '\\u3133',\n    '\\u11ab': '\\u3134',\n    '\\u11ac': '\\u3135',\n    '\\u11ad': '\\u3137',\n    '\\u11ae': '\\u3137',\n    '\\u11af': '\\u3139',\n    '\\u11b0': '\\u313a',\n    '\\u11b1': '\\u313b',\n    '\\u11b2': '\\u313c',\n    '\\u11b3': '\\u313d',\n    '\\u11b4': '\\u313e',\n    '\\u11b5': '\\u313f',\n    '\\u11b6': '\\u3140',\n    '\\u11b7': '\\u3141',\n    '\\u11b8': '\\u3142',\n    '\\u11b9': '\\u3144',\n    '\\u11ba': '\\u3145',\n    '\\u11bb': '\\u3146',\n    '\\u11bc': '\\u3147',\n    '\\u11bd': '\\u3148',\n    '\\u11be': '\\u314a',\n    '\\u11bf': '\\u314b',\n    '\\u11c0': '\\u314c',\n    '\\u11c1': '\\u314d',\n    '\\u11c2': '\\u314e',\n};\n\nconst VOWEL_TABLE: TStringIndex = {\n    '\\u1160': '\\u1160',\n    '\\u1161': '\\u314f',\n    '\\u1162': '\\u3150',\n    '\\u1163': '\\u3151',\n    '\\u1164': '\\u3152',\n    '\\u1165': '\\u3153',\n    '\\u1166': '\\u3154',\n    '\\u1167': '\\u3155',\n    '\\u1168': '\\u3156',\n    '\\u1169': '\\u3157',\n    '\\u116a': '\\u3158',\n    '\\u116b': '\\u3159',\n    '\\u116c': '\\u315a',\n    '\\u116d': '\\u315b',\n    '\\u116e': '\\u315c',\n    '\\u116f': '\\u315d',\n    '\\u1170': '\\u315e',\n    '\\u1171': '\\u315f',\n    '\\u1172': '\\u3160',\n    '\\u1173': '\\u3161',\n    '\\u1174': '\\u3162',\n    '\\u1175': '\\u3163',\n}\n\nconst COMPATIBILITY_TABLE: string[][] = [\n    ['\\u3131', '\\u3132', '\\u3134', '\\u3137', '\\u3138', '\\u3139', '\\u3141', '\\u3142', '\\u3143', '\\u3145', '\\u3146', '\\u3147', '\\u3148', '\\u3149', '\\u314a', '\\u314b', '\\u314c', '\\u314d', '\\u314e'],\n    ['\\u314f', '\\u3150', '\\u3151', '\\u3152', '\\u3153', '\\u3154', '\\u3155', '\\u3156', '\\u3157', '\\u3158', '\\u3159', '\\u315a', '\\u315b', '\\u315c', '\\u315d', '\\u315e', '\\u315f', '\\u3160', '\\u3161', '\\u3162', '\\u3163'],\n    ['_', '\\u3131', '\\u3132', '\\u3133', '\\u3134', '\\u3135', '\\u3137', '\\u3137', '\\u3139', '\\u313a', '\\u313b', '\\u313c', '\\u313d', '\\u313e', '\\u313f', '\\u3140', '\\u3141', '\\u3142', '\\u3144', '\\u3145', '\\u3146', '\\u3147', '\\u3148', '\\u314a', '\\u314b', '\\u314c', '\\u314d', '\\u314e',]\n];\n\nconst COMPATIBILITY_HANGUL_BEGIN = 0xac00;\nconst COMPATIBILITY_HANGUL_END = 0xd7a3;\n\nObject.freeze(CONSONANTS_TABLE);\nObject.freeze(VOWEL_TABLE);\nObject.freeze(COMPATIBILITY_TABLE);\n\nexport {\n    CONSONANTS_TABLE, VOWEL_TABLE, COMPATIBILITY_TABLE, COMPATIBILITY_HANGUL_BEGIN, COMPATIBILITY_HANGUL_END\n}","export function hangulJamo(code: number) {\n    // Initial consonants\n    if (code >= 0x1100 && code <= 0x1112) return 1;\n    // Medial vowels\n    if (code >= 0x1160 && code <= 0x1175) return 2;\n    // Final consonants\n    if (code >= 0x11a8 && code <= 0x11c2) return 3;\n    return 0;\n}\n\nexport function hangulCompatibilityJamo(code: number) {\n    // Consonants\n    if (code >= 0x3131 && code <= 0x314e) return 1;\n    // Vowels\n    if (code >= 0x314f && code <= 0x3163) return 2;\n    return 0;\n}\n\nexport function isHangulSyllables(code: number) {\n    return code >= 0xac00 && code <= 0xd7a3;\n}\n\nexport function isHangul(code: number) {\n    return (isHangulSyllables(code) || hangulJamo(code) > 0 || hangulCompatibilityJamo(code) > 0);\n}\n","import { COMPATIBILITY_HANGUL_BEGIN, COMPATIBILITY_TABLE, CONSONANTS_TABLE, VOWEL_TABLE } from \"./constants\";\nimport { hangulJamo, isHangul, isHangulSyllables, hangulCompatibilityJamo } from \"./utils\";\n\nexport function useJamo() {\n    let jamoArray: string[] = [];\n    let index = 0;\n\n    const push = (letter: string) => {\n        jamoArray[index] = letter;\n        index += 1\n    };\n\n    const clear = () => {\n        jamoArray = [];\n        index = 0;\n    };\n\n    const getJamo = () => jamoArray;\n\n    return [push, clear, getJamo] as const;\n}\n\nexport function disassemble(code: number) {\n    const ii = Math.floor((code - COMPATIBILITY_HANGUL_BEGIN) / 588)\n        , mi = Math.floor((code - COMPATIBILITY_HANGUL_BEGIN - (ii * 588)) / 28)\n        , fi = (code - COMPATIBILITY_HANGUL_BEGIN - (ii * 588)) - (mi * 28);\n\n    const is = COMPATIBILITY_TABLE[0][ii]\n        , ms = COMPATIBILITY_TABLE[1][mi]\n        , fs = COMPATIBILITY_TABLE[2][fi];\n\n    const ret = [is, ms];\n\n    if (fi > 0) ret.push(fs);\n    return ret;\n}\n\nexport function decomposeToCompatJamo(hangul: string) {\n    const letters = hangul.split('');\n    const [push, clear, getJamo] = useJamo();\n    const result: string[][] = [];\n\n    for (let i = 0; i < letters.length; i += 1) {\n        const letter = letters[i];\n        const code = letter.charCodeAt(0);\n        const jamoNumber = hangulJamo(code);\n\n        if (!jamoNumber) {\n            if (getJamo().length > 0) {\n                result.push(getJamo());\n                clear();\n            }\n        }\n\n        if (!isHangul(code) || hangulCompatibilityJamo(code) > 0) {\n            result.push([letter]);\n            continue;\n        }\n\n        if (isHangulSyllables(code)) {\n            result.push(disassemble(code));\n            continue;\n        }\n\n        if (jamoNumber) {\n            if (getJamo()[jamoNumber - 1]) {\n                result.push(getJamo());\n                clear();\n            }\n            if (jamoNumber === 1) {\n                push(CONSONANTS_TABLE[letter])\n            }\n            if (jamoNumber === 2) {\n                push(VOWEL_TABLE[letter]);\n            }\n            if (jamoNumber === 3) {\n                push(CONSONANTS_TABLE[letter])\n            }\n        }\n    }\n\n    if (getJamo().length > 0) result.push(getJamo());\n\n    return result;\n}","import { COMPATIBILITY_TABLE } from \"./constants\";\n\nexport function composeFromCompatArray(jamoArray: readonly string[][]) {\n    return jamoArray.map(letter => composeFromCompat(letter)).join('');\n}\n\nexport function composeFromCompat(jamoArray: readonly string[]) {\n    if (jamoArray.length === 1) return jamoArray[0];\n\n    const indices = [0, 0, 0];\n    jamoArray.map((jamo, i) => indices[i] = COMPATIBILITY_TABLE[i].findIndex(ch => ch === jamo));\n    return String.fromCharCode(((indices[0] * 21) + indices[1]) * 28 + indices[2] + 0xac00);\n}"],"names":["CONSONANTS_TABLE","VOWEL_TABLE","COMPATIBILITY_TABLE","hangulJamo","code","hangulCompatibilityJamo","isHangulSyllables","isHangul","disassemble","ii","Math","floor","mi","fi","is","ms","fs","ret","push","decomposeToCompatJamo","hangul","jamoArray","index","letters","split","_a","letter","clear","getJamo","result","i","length","charCodeAt","jamoNumber","composeFromCompatArray","map","composeFromCompat","join","indices","jamo","findIndex","ch","String","fromCharCode","Object","freeze"],"mappings":"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"}